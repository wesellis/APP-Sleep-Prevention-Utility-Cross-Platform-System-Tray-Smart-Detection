# SleepFree Development Environment Setup

## Complete Software Stack for Development

### Development Machine Requirements

**Minimum System Requirements:**
- OS: Windows 10/11 Pro, macOS 12+, or Ubuntu 20.04+
- RAM: 16GB minimum, 32GB recommended
- Storage: 500GB SSD minimum, 1TB recommended
- CPU: Intel i7/AMD Ryzen 7 or better
- Graphics: Dedicated GPU recommended for Android emulator

**Recommended Development Setup:**
- OS: Windows 11 Pro or macOS Monterey
- RAM: 32GB DDR4
- Storage: 1TB NVMe SSD
- CPU: Intel i9 or Apple M2 Pro
- Graphics: NVIDIA RTX 3060 or Apple M2 Pro integrated

## Core Development Tools

### 1. Android Development Environment

**Android Studio (Primary IDE):**
```bash
# Download from: https://developer.android.com/studio
# Latest stable version (2023.1.1 or newer)

Components to Install:
- Android SDK Platform-Tools
- Android SDK Build-Tools
- Android Emulator
- Android SDK Platform (API 33, 34)
- Google APIs Intel x86 Atom System Images
- Samsung Galaxy Watch emulator images
```

**Android SDK Setup:**
```bash
# Set environment variables (Windows)
ANDROID_HOME=C:\Users\%USERNAME%\AppData\Local\Android\Sdk
PATH=%PATH%;%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools

# Set environment variables (macOS/Linux)
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
```

**Samsung Health SDK:**
```bash
# Download from Samsung Health Developers Portal
# https://developer.samsung.com/health
# Requires Samsung developer account registration

Installation:
1. Download Samsung Health SDK
2. Extract to Android SDK extras folder
3. Add to build.gradle dependencies
4. Configure Samsung Health permissions
```

### 2. Backend Development Environment

**Node.js Development:**
```bash
# Install Node.js (LTS version 18.x or newer)
# Download from: https://nodejs.org/

# Verify installation
node --version
npm --version

# Install global development tools
npm install -g @firebase/cli
npm install -g typescript
npm install -g nodemon
npm install -g jest
npm install -g eslint
```

**Python Environment (for ML development):**
```bash
# Install Python 3.9+ from https://python.org/

# Install virtual environment
pip install virtualenv

# Create virtual environment
python -m venv sleepfree-ml
source sleepfree-ml/bin/activate  # Linux/Mac
sleepfree-ml\Scripts\activate     # Windows

# Install ML packages
pip install tensorflow
pip install scikit-learn
pip install pandas
pip install numpy
pip install jupyter
pip install matplotlib
```

### 3. Database and Cloud Development

**Firebase CLI Setup:**
```bash
# Install Firebase CLI
npm install -g firebase-tools

# Login to Firebase
firebase login

# Initialize Firebase project
firebase init

# Available services for SleepFree:
- Authentication
- Firestore Database
- Cloud Functions
- Cloud Storage
- Analytics
- Crashlytics
```

**Google Cloud CLI:**
```bash
# Download from: https://cloud.google.com/sdk/docs/install

# Initialize and authenticate
gcloud init
gcloud auth login
gcloud auth application-default login

# Set project
gcloud config set project sleepfree-app
```

### 4. Version Control and Collaboration

**Git Setup:**
```bash
# Download Git from: https://git-scm.com/
# Configure Git
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Generate SSH key for GitHub
ssh-keygen -t ed25519 -C "your.email@example.com"
# Add to GitHub: https://github.com/settings/keys
```

**GitHub Desktop (Optional GUI):**
```bash
# Download from: https://desktop.github.com/
# Provides visual interface for Git operations
```

### 5. Design and Prototyping Tools

**Figma (UI/UX Design):**
```bash
# Web-based tool: https://figma.com/
# Desktop app available for offline work
# Create SleepFree design system
# Prototype user flows and interactions
```

**Adobe Creative Suite (Optional):**
```bash
# Photoshop for image editing
# Illustrator for vector graphics
# After Effects for animations
# Alternative: GIMP (free) + Inkscape (free)
```

## Development Environment Configuration

### Android Studio Project Setup

**Project Structure:**
```
sleepfree-android/
├── app/
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/com/sleepfree/
│   │   │   │   ├── ui/
│   │   │   │   ├── data/
│   │   │   │   ├── domain/
│   │   │   │   ├── sleep/
│   │   │   │   ├── audio/
│   │   │   │   └── ml/
│   │   │   ├── res/
│   │   │   └── AndroidManifest.xml
│   │   ├── test/
│   │   └── androidTest/
│   ├── build.gradle
│   └── proguard-rules.pro
├── wear/
│   ├── src/main/
│   └── build.gradle
├── shared/
├── build.gradle
└── settings.gradle
```

**Key Dependencies (build.gradle):**
```kotlin
dependencies {
    // Core Android
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    
    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
    
    // Samsung Health SDK
    implementation files('libs/samsung-health-data-sdk.jar')
    
    // Firebase
    implementation platform('com.google.firebase:firebase-bom:32.2.0')
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    
    // Machine Learning
    implementation 'org.tensorflow:tensorflow-lite:2.13.0'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.2'
    
    // Audio Processing
    implementation 'androidx.media:media:1.6.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
```

### Backend Development Setup

**Firebase Project Structure:**
```
sleepfree-backend/
├── functions/
│   ├── src/
│   │   ├── auth/
│   │   ├── user/
│   │   ├── sleep/
│   │   ├── suggestions/
│   │   ├── analytics/
│   │   └── index.ts
│   ├── package.json
│   └── tsconfig.json
├── firestore.rules
├── storage.rules
├── firebase.json
└── .firebaserc
```

**Cloud Functions Dependencies (package.json):**
```json
{
  "dependencies": {
    "firebase-admin": "^11.10.1",
    "firebase-functions": "^4.3.1",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "joi": "^17.9.2",
    "jsonwebtoken": "^9.0.1",
    "bcryptjs": "^2.4.3",
    "node-cron": "^3.0.2",
    "nodemailer": "^6.9.3"
  },
  "devDependencies": {
    "@types/node": "^20.4.5",
    "typescript": "^5.1.6",
    "jest": "^29.6.1",
    "supertest": "^6.3.3"
  }
}
```

## Simulation and Testing Environment

### Android Emulator Setup

**Galaxy Watch Emulator:**
```bash
# Install Galaxy Watch Designer
# Download from Samsung Developers Portal
# Create watch face mockups and test interfaces

# Wear OS Emulator Setup
1. Open Android Studio AVD Manager
2. Create New Virtual Device
3. Select Wear OS category
4. Choose Galaxy Watch 4 or newer
5. Download system image (API 30+)
6. Configure emulator settings
```

**Sleep Data Simulation:**
```kotlin
// Create mock sleep data for testing
class MockSleepDataGenerator {
    fun generateNightSession(): SleepSession {
        return SleepSession(
            startTime = LocalDateTime.now().minusHours(8),
            endTime = LocalDateTime.now(),
            stages = listOf(
                SleepStage(LIGHT_SLEEP, 30.minutes),
                SleepStage(DEEP_SLEEP, 90.minutes),
                SleepStage(REM_SLEEP, 60.minutes),
                SleepStage(LIGHT_SLEEP, 45.minutes)
            ),
            heartRate = generateRealisticHeartRate(),
            movement = generateMovementData()
        )
    }
}
```

### Audio Testing Environment

**Audio Development Setup:**
```bash
# Install audio editing software
# Audacity (free): https://audacityteam.org/
# Adobe Audition (professional)
# Logic Pro (macOS)

# TTS Testing Tools
# Google Cloud Text-to-Speech API
# Amazon Polly
# Azure Cognitive Services Speech
```

**Audio Testing Framework:**
```kotlin
class AudioTestingFramework {
    fun testSuggestionDelivery() {
        // Test audio quality and timing
        val audioPlayer = AudioPlayer()
        val suggestion = generateTestSuggestion()
        
        // Verify audio plays at correct volume
        assertEquals(0.1f, audioPlayer.getVolume())
        
        // Test audio duration matches expectation
        assertEquals(120, suggestion.durationSeconds)
        
        // Verify no audio artifacts or distortion
        assertTrue(audioPlayer.checkAudioQuality())
    }
}
```

### Machine Learning Development

**TensorFlow Development Environment:**
```python
# Create ML development workspace
import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

# Sleep stage classification model
class SleepStageClassifier:
    def __init__(self):
        self.model = tf.keras.Sequential([
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dropout(0.2),
            tf.keras.layers.Dense(64, activation='relu'),
            tf.keras.layers.Dense(4, activation='softmax')  # 4 sleep stages
        ])
    
    def train(self, X_train, y_train):
        self.model.compile(
            optimizer='adam',
            loss='categorical_crossentropy',
            metrics=['accuracy']
        )
        return self.model.fit(X_train, y_train, epochs=100)
```

**Model Testing Environment:**
```python
# Create synthetic sleep data for model training
def generate_synthetic_sleep_data(n_samples=10000):
    # Generate realistic sleep patterns
    data = []
    for i in range(n_samples):
        # Heart rate, movement, time features
        heart_rate = np.random.normal(60, 10)
        movement = np.random.exponential(0.1)
        time_in_bed = np.random.uniform(0, 480)  # minutes
        
        # Determine sleep stage based on features
        if heart_rate < 55 and movement < 0.05:
            stage = 'DEEP_SLEEP'
        elif heart_rate < 65 and movement < 0.1:
            stage = 'LIGHT_SLEEP'
        elif heart_rate > 70:
            stage = 'REM_SLEEP'
        else:
            stage = 'AWAKE'
            
        data.append([heart_rate, movement, time_in_bed, stage])
    
    return pd.DataFrame(data, columns=['heart_rate', 'movement', 'time', 'stage'])
```

## Local Development Workflow

### Development Server Setup

**Local Backend Server:**
```bash
# Start Firebase emulators for local development
firebase emulators:start

# This starts:
# - Firestore emulator (port 8080)
# - Authentication emulator (port 9099)
# - Functions emulator (port 5001)
# - Storage emulator (port 9199)
```

**Android App with Local Backend:**
```kotlin
// Configure app to use local emulators during development
class FirebaseConfig {
    fun configureForDevelopment() {
        if (BuildConfig.DEBUG) {
            // Use local emulators
            Firebase.firestore.useEmulator("10.0.2.2", 8080)
            Firebase.auth.useEmulator("10.0.2.2", 9099)
        }
    }
}
```

### Database Seeding and Testing

**Test Data Setup:**
```javascript
// Seed development database with test data
const admin = require('firebase-admin');

async function seedDatabase() {
    const db = admin.firestore();
    
    // Create test users
    const testUsers = [
        {
            id: 'test-user-1',
            profile: {
                name: 'John Doe',
                smokingHistory: {
                    cigarettesPerDay: 20,
                    yearsSmoking: 15
                }
            }
        }
    ];
    
    // Add sleep session data
    const sleepSessions = generateTestSleepSessions();
    
    // Populate database
    for (const user of testUsers) {
        await db.collection('users').doc(user.id).set(user);
    }
}
```

### Automated Testing Setup

**Unit Testing Framework:**
```kotlin
// Android unit tests
@RunWith(MockitoJUnitRunner::class)
class SleepStageDetectorTest {
    
    @Mock
    private lateinit var mockHealthData: HealthDataProvider
    
    @Test
    fun `should detect light sleep from biometric data`() {
        // Arrange
        val heartRate = 58
        val movement = 0.1f
        val detector = SleepStageDetector()
        
        // Act
        val result = detector.detectStage(heartRate, movement)
        
        // Assert
        assertEquals(SleepStage.LIGHT_SLEEP, result.stage)
        assertTrue(result.confidence > 0.8f)
    }
}
```

**Integration Testing:**
```kotlin
@RunWith(AndroidJUnit4::class)
class SleepMonitoringIntegrationTest {
    
    @Test
    fun testFullSleepMonitoringWorkflow() {
        // Test complete sleep monitoring cycle
        val sleepMonitor = SleepMonitor()
        
        // Start monitoring
        sleepMonitor.startMonitoring()
        
        // Simulate sleep data input
        sleepMonitor.processSleepData(mockSleepData)
        
        // Verify suggestion scheduling
        val suggestions = sleepMonitor.getScheduledSuggestions()
        assertTrue(suggestions.isNotEmpty())
    }
}
```

## Development Productivity Tools

### Code Quality Tools

**Linting and Formatting:**
```bash
# Kotlin linting
./gradlew ktlintCheck
./gradlew ktlintFormat

# JavaScript/TypeScript linting
npm run lint
npm run format

# Python linting
pip install flake8 black
flake8 src/
black src/
```

**Static Analysis:**
```bash
# Android static analysis
./gradlew lint
./gradlew detekt

# SonarQube integration
./gradlew sonarqube
```

### Debugging Tools

**Android Debugging:**
```kotlin
// Debug logging configuration
class DebugLogger {
    companion object {
        fun logSleepData(data: SleepData) {
            if (BuildConfig.DEBUG) {
                Log.d("SleepFree", "Sleep stage: ${data.stage}")
                Log.d("SleepFree", "Heart rate: ${data.heartRate}")
                Log.d("SleepFree", "Movement: ${data.movement}")
            }
        }
    }
}
```

**Network Debugging:**
```bash
# Install Charles Proxy or similar
# Monitor API calls and responses
# Test offline scenarios
# Validate SSL/TLS certificates
```

### Performance Monitoring

**Local Performance Testing:**
```kotlin
// Memory and performance profiling
class PerformanceProfiler {
    fun profileSleepDetection() {
        val startTime = System.currentTimeMillis()
        val startMemory = Runtime.getRuntime().totalMemory()
        
        // Execute sleep detection algorithm
        sleepDetector.processData(mockData)
        
        val endTime = System.currentTimeMillis()
        val endMemory = Runtime.getRuntime().totalMemory()
        
        Log.d("Performance", "Execution time: ${endTime - startTime}ms")
        Log.d("Performance", "Memory usage: ${endMemory - startMemory} bytes")
    }
}
```

## Deployment Pipeline Setup

### Development to Production Pipeline

**GitHub Actions Workflow:**
```yaml
name: SleepFree CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Run Android tests
      run: ./gradlew test
    
    - name: Run backend tests
      run: |
        cd functions
        npm install
        npm test
  
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Build Android APK
      run: ./gradlew assembleDebug
    
    - name: Deploy to Firebase
      run: firebase deploy --only functions
```

### Environment Management

**Configuration Management:**
```kotlin
// Environment-specific configuration
class Config {
    companion object {
        val API_BASE_URL = when (BuildConfig.BUILD_TYPE) {
            "debug" -> "http://localhost:5001"
            "staging" -> "https://staging-api.sleepfree.app"
            "release" -> "https://api.sleepfree.app"
            else -> throw IllegalStateException("Unknown build type")
        }
        
        val SAMSUNG_HEALTH_APP_ID = when (BuildConfig.BUILD_TYPE) {
            "debug" -> "com.sleepfree.debug"
            else -> "com.sleepfree.app"
        }
    }
}
```

**YES - You can develop and test everything on a computer first!** This setup allows you to:

✅ **Build the entire app without physical devices**
✅ **Simulate sleep data and user interactions**
✅ **Test audio delivery and ML algorithms**
✅ **Develop and debug all features locally**
✅ **Run automated tests and quality checks**
✅ **Deploy to staging environments for testing**

**Development Timeline:**
- **Week 1:** Set up development environment
- **Week 2:** Build core app structure and navigation
- **Week 3:** Implement sleep data simulation and UI
- **Week 4:** Add audio system and suggestion delivery
- **Month 2:** Add ML components and personalization
- **Month 3:** Integration testing and optimization

You can absolutely build this entire system on your computer first, then gradually integrate with real devices and cloud services as you progress!